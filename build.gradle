/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'Rithy58' at '11/15/16 5:46 PM' with Gradle 3.2
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.2/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'jacoco'

// Enable the jacoco XML report.
jacocoTestReport {
    reports {
        xml.enabled true
    }
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'

    // Compile Dependencies
    compile 'junit:junit:4.12'
    compile files('major/config/config.jar', 'sample/')

    // Declare the dependency for your favourite test framework you want to use in your tests.
    testCompile 'junit:junit:4.12'
}

// Extract Major Framework
task extractMajor(type: Copy) {
    from zipTree(file('major-1.1.8_jre7.zip'))
    into file('.')
}

// Compile Sample Program with Major
// TODO: Test with Windows
// TODO: make this compileSample and just call other tasks
task compileSampleProgram(type: Exec, dependsOn: extractMajor) {
    commandLine 'major/bin/javac', '-XMutator=major/mml/tutorial.mml.bin', 'sample/triangle/Triangle.java'
}

// Compile Sample TestSuite
// TODO: Test with Windows
// TODO: Use JavaCompile instead
task compileSampleTestSuite(type: Exec, dependsOn: compileSampleProgram) {
    commandLine 'major/bin/javac', '-cp', '.:major/lib/junit-4.11.jar:sample/', 'sample/TestSuite.java'
}

// Compile Analyzer to sample folder
// TODO: Test with Windows
task compileAnalyzer(type: JavaCompile, dependsOn: compileSampleTestSuite) {
    classpath = files('major/config/config.jar', 'major/lib/junit-4.11.jar', 'sample/')
    destinationDir = file('sample/')
    source = file('src/main/java/Analyzer.java')
}

task runAnalyzer(type: JavaExec, dependsOn: compileAnalyzer) {
    classpath = files('major/config/config.jar', 'major/lib/junit-4.11.jar', 'sample/')
    main = 'Analyzer'
}
