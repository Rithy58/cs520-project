// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'jacoco'

sourceCompatibility = 1.8

// Enable the jacoco XML report.
jacocoTestReport {
    reports {
        xml.enabled true
    }
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'

    // Compile Dependencies
    compile 'junit:junit:4.12'
    compile files('lib/major/config/config.jar', 'sample/')

    // Workaround for gradle on Windows
    runtime files(org.gradle.internal.jvm.Jvm.current().toolsJar)
    compile files(org.gradle.internal.jvm.Jvm.current().toolsJar)

    // Declare the dependency for your favourite test framework you want to use in your tests.
    testCompile 'junit:junit:4.12'
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.2.1'
}

// Extract Major Framework
task extractMajor(type: Copy) {
    from zipTree(file('major-1.1.8_jre7.zip'))
    into file('lib/')
}

compileJava.dependsOn extractMajor

// Compile Sample Program with Major
task compileSampleProgram(type: Exec, dependsOn: extractMajor) {
    commandLine 'sh', 'lib/major/bin/javac', '-XMutator:ALL', 'sample/triangle/Triangle.java', '-Xlint:none'
}

// Compile Sample TestSuite
task compileSampleTestSuite(type: JavaCompile, dependsOn: compileSampleProgram) {
    classpath = files('lib/major/lib/junit-4.11.jar', 'sample/')
    destinationDir = file('sample/')
    source = files('sample/TestSuite.java', 'sample/TestSuite0.java')
}

// Compile Analyzer to sample folder
task compileSampleAnalyzer(type: JavaCompile, dependsOn: [compileSampleTestSuite, compileJava]) {
    classpath = files('lib/major/config/config.jar', 'lib/major/lib/junit-4.11.jar', 'sample/')
    destinationDir = file('sample/')
    source = files('src/main/java/')
}

// Run the sample Analyzer
task runSampleAnalyzer(type: JavaExec, dependsOn: compileSampleAnalyzer) {
    classpath = files('lib/major/config/config.jar', 'lib/major/lib/junit-4.11.jar', 'sample/')
    main = 'SampleAnalyzer'
}

task compileNumerics4j(type: JavaCompile, dependsOn: extractMajor) {
    classpath = files('lib/major/config/config.jar', 'lib/major/lib/junit-4.11.jar')
    destinationDir = file('numerics4j/')
    source = files('src/main/java/')
}

task runNumerics4j(type: JavaExec, dependsOn: compileNumerics4j) {
    classpath = files('lib/major/config/config.jar', 'numerics4j/tests', 'numerics4j/bin/', 'lib/major/lib/junit-4.11.jar', 'numerics4j/')
    allJvmArgs = '-Xms128m -Xmx512m'
    main = 'NumericsAnalyzer'
}
